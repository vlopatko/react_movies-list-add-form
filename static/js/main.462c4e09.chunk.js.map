{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","useState","Math","random","toFixed","slice","id","pattern","touched","setTouched","isNoValid","setIsNotValid","hasError","trim","length","htmlFor","type","classNames","event","target","onBlur","test","NewMovie","onAdd","count","setCount","setTitle","setDescription","setImgUrl","setImdbUrl","setImdbId","newMovie","onClick","preventDefault","disabled","App","moviesFromServer","preparedMovies","setPreparedMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.462c4e09.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: string) => void,\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => { },\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // eslint-disable-next-line max-len\n  const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const [isNoValid, setIsNotValid] = useState(false);\n\n  const hasError = touched\n    && required\n    && (value.trim().length < 1 || isNoValid);\n\n  const handleBlur = () => {\n    if (name === 'imgUrl' || name === 'imdbUrl') {\n      setIsNotValid(!pattern.test(value));\n    }\n\n    setTouched(true);\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={event => {\n            onChange(event.target.value);\n          }}\n          onBlur={handleBlur}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  onAdd: (movie: Movie) => void\n}\n\nexport const NewMovie = ({ onAdd }: Props) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [imgUrl, setImgUrl] = useState('');\n  const [imdbUrl, setImdbUrl] = useState('');\n  const [imdbId, setImdbId] = useState('');\n\n  const newMovie = {\n    title,\n    description,\n    imgUrl,\n    imdbUrl,\n    imdbId,\n  };\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    onAdd(newMovie);\n    setTitle('');\n    setDescription('');\n    setImgUrl('');\n    setImdbUrl('');\n    setImdbId('');\n    setCount(count + 1);\n  };\n\n  return (\n    <form className=\"NewMovie\" key={count}>\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        placeholder=\"Enter Title\"\n        onChange={setTitle}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        placeholder=\"Enter Description\"\n        value={description}\n        onChange={setDescription}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        placeholder=\"Enter Image URL\"\n        value={imgUrl}\n        onChange={setImgUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        placeholder=\"Enter Imdb URL\"\n        value={imdbUrl}\n        onChange={setImdbUrl}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        placeholder=\"Enter Imdb ID\"\n        value={imdbId}\n        onChange={setImdbId}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            onClick={handleSubmit}\n            disabled={\n              title.trim().length < 1\n              || imgUrl.trim().length < 1\n              || imdbUrl.trim().length < 1\n              || imdbId.trim().length < 1\n            }\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import './App.scss';\nimport { useState } from 'react';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [preparedMovies, setPreparedMovies] = useState([...moviesFromServer]);\n\n  const getPreparedMovies = (newMovie: Movie) => {\n    setPreparedMovies([...preparedMovies, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={preparedMovies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie\n          onAdd={getPreparedMovies}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}